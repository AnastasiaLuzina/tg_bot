import requests
import time
import threading


TOKEN = "7425335973:AAGeqG2Rk0FXOJE7cewejl9Op2Dg6vhCi_0"
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"

offset = 0
states = {}
user_tasks = {}
const_tasks = {}
active_reminders = {}

def send_reminder(chat_id, task_name):
    requests.post(
        BASE_URL + "sendMessage",
        json={
            "chat_id": chat_id, 
            "text": f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–ó–∞–¥–∞—á–∞: {task_name}"
        }
    )

def schedule_reminder(chat_id, task_name, minutes):
    def reminder_job():
        time.sleep(minutes * 60)
        send_reminder(chat_id, task_name)
    
    thread = threading.Thread(target=reminder_job)
    thread.start()

    if chat_id not in active_reminders: 
        active_reminders[chat_id] = []

    active_reminders[chat_id].append({
    "task_name": task_name,
    "remind_minutes": minutes, 
    "thread": thread,
    "end_time": time.time() + minutes * 60
    })


def send_inline_buttons(chat_id, text):
    keyboard = {
        "inline_keyboard": [
            [{"text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "callback_data": "reminder"}],
            [{"text": "üìÉ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á", "callback_data": "list_tasks"}],
             [{"text": "–¢—ã–∫–Ω–∏ –Ω–µ –ø–æ–∂–∞–ª–µ–µ—à—å :)", "callback_data": "meme_bro"}]  #–∑–∞–±—ã–ª–∞ –∑–∞–ø—è—Ç—É—é    
        ]
    }
    requests.post(
        BASE_URL + "sendMessage",
        json={
            "chat_id": chat_id,
            "text": text,
            "reply_markup": keyboard
        }
    )


def send_inline_buttons_for_list(chat_id,text):
    keyboard = {
        "inline_keyboard": [
            [{"text": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –∑–∞–¥–∞—á–∏", "callback_data": "editor"}],
            [{"text": "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", "callback_data": "delete"}]
           
        ]
    }

    requests.post(
        BASE_URL + "sendMessage",
        json={
            "chat_id": chat_id,
            "text": text,
            "reply_markup": keyboard
        }
    )

def print_all_tasks_const(chat_id):
    message = "üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
    if chat_id in const_tasks and const_tasks[chat_id]:
        for task in const_tasks[chat_id]:  # –£–±—Ä–∞–ª–∏ enumerate
            message += f"‚Ä¢ {task['task_name']} —á–µ—Ä–µ–∑ {task['remind_minutes']} –º–∏–Ω\n"
    else:
        message = "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!"
    return message


def handle_reminder_flow(chat_id, text):

    current_state = states.get(chat_id)
    
    if current_state == "waiting_for_task_name":
        user_tasks[chat_id] = {"task_name": text}

        states[chat_id] = "waiting_for_remind_minutes"
        requests.post(
            BASE_URL + "sendMessage",
            json={"chat_id": chat_id, "text": f"–ó–∞–¥–∞—á–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç—å?"}
        )
    
    elif current_state == "waiting_for_remind_minutes":
        try:
            remind_minutes = float(text)
                
            task_name = user_tasks[chat_id]["task_name"]
            
            if chat_id not in const_tasks:
                const_tasks[chat_id] = []

            const_tasks[chat_id].append({
                "task_name": task_name,
                "remind_minutes": remind_minutes
            })
            
            schedule_reminder(chat_id, task_name, remind_minutes)
            
            del states[chat_id]
            del user_tasks[chat_id]
            
            requests.post(
                BASE_URL + "sendMessage",
                json={"chat_id": chat_id, "text": f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n–ó–∞–¥–∞—á–∞: {task_name}\n–ß–µ—Ä–µ–∑ {remind_minutes} –º–∏–Ω—É—Ç"}
            )
            send_inline_buttons(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            
        except ValueError:
            requests.post(
                BASE_URL + "sendMessage",
                json={"chat_id": chat_id, "text": "‚ùå –ù–∞—à –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –∫–∏–Ω—É—Ç—å –Ω–∞ –ø—Ä–æ–≥–∏–± –≤—Ä–µ–º—è –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç!"}
            )



def handle_list_flow(chat_id, text):
    global offset

    current_state = states.get(chat_id)

    if current_state == "waiting_for_editor":
         try:
            print("–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ 1 ")

            make_button_editor_tasks(chat_id, const_tasks, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            updates = requests.get(
            BASE_URL + "getUpdates",
            params={"offset": offset, "timeout": 30}
            ).json()

            print("–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ 2 ")

            for update in updates.get("result", []): # –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç –∫ —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –±—ã—Ç—å
                offset = update["update_id"] + 1
                
                if "callback_query" in update:

                    callback = update["callback_query"]
                    data = callback["data"]   

                    states[chat_id] = "waiting_for_new_name"
                    user_tasks[chat_id] = {"selected_task": data} #–º–æ—è –æ—à–∏–±–∫–∞ –∑–∞–±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å -> —á—Ç–æ–±—ã 

                    requests.post(
                            BASE_URL + "sendMessage",
                            json={"chat_id": chat_id, "text": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏"}
                        )
                    print("–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ 3 ")

         except ValueError:
            requests.post(
                BASE_URL + "sendMessage",
                json={"chat_id": chat_id, "text": "–Ω—É –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞ —è —Ö–∑ –∫–∞–∫–∞—è"}
            )


    
    elif current_state == "waiting_for_new_name": 
        
        try:
            print("–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ 4")

            task_id = int(user_tasks[chat_id].get("selected_task"))
            new_name = text # –Ω–µ –ø–æ–Ω—è–ª–∞ —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–¥ –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

            if chat_id in const_tasks and 0 <= task_id < len(const_tasks[chat_id]):
                const_tasks[chat_id][task_id]["task_name"] = new_name #task_id = user_tasks[chat_id].get("selected_task")

           
            print("–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ 5")
            
            const_tasks[chat_id][task_id]["task_name"] = new_name

            print("–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ 6")

            requests.post(
                    BASE_URL + "sendMessage",
                    json={"chat_id": chat_id, "text": f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}. –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º :)"}
                )
            make_button_editor_tasks(chat_id, const_tasks, "–ú–æ–∂–µ—Ç –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å)")

            print("–º—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ 7")

                
            del states[chat_id]
            del user_tasks[chat_id] # –∑–∞–±—ã–ª–∞ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ –Ω–æ–≤–æ–π –∑–∞–ø—É—Å–∫–∞—Ç—å :)

        except ValueError:
            requests.post(
                BASE_URL + "sendMessage",
                json={
                    "chat_id": chat_id,
                    "text": "–ù—É—Ç —Ç—É—Ç –æ—à–∏–±–∫–∞ —è —Ö–∑ –∫–∞–∫–∞—è"}
            )





    elif current_state == "waiting_for_delete":
        try:

            input_task_name = text.strip().lower() 
            
            if chat_id not in const_tasks or len(const_tasks[chat_id]) == 0:
                requests.post(BASE_URL + "sendMessage", json={
                    "chat_id": chat_id, 
                    "text": "üö´ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!"
                })
                del states[chat_id]  
                return

            # –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–∫–µ
            found = False
            for task in const_tasks[chat_id]:
                
                if task["task_name"].lower() == input_task_name:
                    
                    const_tasks[chat_id].remove(task)
                    found = True
                    
                    if chat_id in active_reminders:
                        active_reminders[chat_id] = [r for r in active_reminders[chat_id] 
                                                if r["task_name"].lower() != input_task_name]
                    
                    requests.post(BASE_URL + "sendMessage", json={
                        "chat_id": chat_id,
                        "text": f"‚úÖ –ó–∞–¥–∞—á–∞ '{task['task_name']}' —É–¥–∞–ª–µ–Ω–∞!"
                    })
                    break
                    
            if not found:
                requests.post(BASE_URL + "sendMessage", json={
                    "chat_id": chat_id,
                    "text": "–¢–∞–∫–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ—Ç —è —Ö–∑ –≥–¥–µ –æ–Ω–∞ –ø–æ—Ç–µ—Ä—è–ª–∞—Å—å"
                })


            del states[chat_id]
            send_inline_buttons(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?:")

        except Exception as e:
            print(f"–û–®–ò–ë–ö–ê: {e}")
            requests.post(BASE_URL + "sendMessage", json={
                "chat_id": chat_id,
                "text": "üò¢ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
            })

def make_button_editor_tasks(chat_id, const_tasks, text):
    keyboard = []
    if chat_id in const_tasks:  # –£–±—Ä–∞—Ç—å and data in active_reminders[chat_id]  if chat_id in const_tasks:‚ùå
        for task_id, task_data in enumerate(const_tasks[chat_id]): # —Ç–∞ –∂–µ —Å–∞–º–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –∞–π–¥–∏ —á–∞—Ç–∞
            keyboard.append([{
                "text": task_data["task_name"], # task_data["name"] -  —É–∫–∞–∑–∞–ª–∞ –Ω–µ —Ç–æ—Ç –∫–ª—é—á
                "callback_data": str(task_id)  # –ò–Ω–¥–µ–∫—Å –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
            }])
    
    requests.post(
        BASE_URL + "sendMessage",
        json={
            "chat_id": chat_id,
            "text":  text,
            "reply_markup": {"inline_keyboard": keyboard}
        }
    )


while True:
    try:

        updates = requests.get(
            BASE_URL + "getUpdates",
            params={"offset": offset, "timeout": 30}
        ).json()
        


        if "result" in updates:
            for update in updates.get("result", []): #–¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                offset = update["update_id"] + 1 

                if "message" in update:
                    message = update["message"]
                    chat_id = message["chat"]["id"]
                    text = message.get("text", "")
                    

                    if text == "/start":
                        send_inline_buttons(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                    else:

                      
                        if chat_id in states:
                            current_state = states[chat_id]
                            
                            if  current_state in ["waiting_for_editor", "waiting_for_delete","waiting_for_new_name"]:
                                handle_list_flow(chat_id, text)

                            else:
                                handle_reminder_flow(chat_id, text)
                        else:
                             send_inline_buttons(chat_id, "–í—ã–º–æ–∂–µ—Ç–µ –≤–æ—Ç —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –µ—â–µ –ø–æ–¥–µ–ª–∞—Ç—å :D") 


                elif "callback_query" in update:

                    callback = update["callback_query"]
                    chat_id = callback["message"]["chat"]["id"]
                    data = callback["data"]

                    requests.post(
                        BASE_URL + "answerCallbackQuery",
                        json={"callback_query_id": callback["id"]}
                    )

                    if data == "reminder":
                        states[chat_id] = "waiting_for_task_name"

                        requests.post(
                            BASE_URL + "sendMessage",
                            json={"chat_id": chat_id, "text": "üìù –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:"}
                        )
                    
                    elif data == "list_tasks":
                        tasks_message = print_all_tasks_const(chat_id)

                        requests.post(
                            BASE_URL + "sendMessage",
                            json={"chat_id": chat_id, "text": tasks_message}
                        )

                        send_inline_buttons_for_list(chat_id,"–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –∑–∞–¥–∞—á–∞–º–∏")
                    
                    elif data == "editor":
                        states[chat_id] = "waiting_for_editor"

                        requests.post(
                            BASE_URL + "sendMessage",
                            json={"chat_id": chat_id, "text": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å"}
                        )
                        handle_list_flow(chat_id, text)
                    
                    elif data == "delete":
                        states[chat_id] = "waiting_for_delete"

                        requests.post(
                            BASE_URL + "sendMessage",
                            json={
                                "chat_id": chat_id,
                                "text": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
                            }
                        )
                    elif data == "meme_bro":
                        requests.post(
                            BASE_URL + "sendMessage",
                            json={
                                "chat_id": chat_id,
                                "text": "   -> @My_memas_bot"
                            }
                        )
        time.sleep(3)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(5)



